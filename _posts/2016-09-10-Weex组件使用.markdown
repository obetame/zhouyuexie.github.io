---
layout: post
title:  "Weex组件使用"
date:   2016-09-10 11:21:03 +0800
tags: vue,weex
---

weex通过vue中的组件思想实现自己的HTML组件,而这些组件会把自定义的标签转换为weex想要显示的样子.以下就是weex中各个HTML组件的介绍(包括各个js模块).

**请注意:vue里的组件和weex组件语法有些不同,如果你之前用过vue,那么你应该知道哪里需要注意了.**

# HTML组件

使用这些组件之前你需要在`<script></script>`里面第一行加入这一行代码:

```javascript
require('weex-components');
```

## [基本属性](https://github.com/weexteam/article/issues/13)

本来我想直接开始介绍组件的,但是组件中有很多属性,每个属性都不同,但是都有类似的属性,也就是基本属性了.

#### [id](https://github.com/alibaba/weex/blob/doc/doc/syntax/id.md)

```html
<template>
  <div id="logo"></div>
  <div id="item-{{index}}"></div>
</template>
```

id 是一个 weex 标签在 <template> 下的唯一标识符。你可以使用 id 属性来引用对应的 weex 标签。

#### [style](https://github.com/alibaba/weex/blob/doc/doc/syntax/style-n-class.md)

```html
<template>
  <div style="width: 200; height: 200"></div>
  <div style="padding: {{x}}; margin: 0"></div>
</template>
```

为 weex 标签增加内联样式。

#### class

```html
<template>
  <div class="button"></div>
  <div class="button {{btnStatus}}"></div>
</template>
```

为 weex 标签增加类别。

#### [repeat](https://github.com/alibaba/weex/blob/doc/doc/syntax/display-logic.md)

```html
<template>
  <div repeat="{{items}}"></div>
</template>
```

以 {{items}} 作为循环项，迭代地生成当前的 weex 标签。

#### [if](https://github.com/alibaba/weex/blob/doc/doc/syntax/display-logic.md)

```html
<template>
  <div if="{{opened}}"></div>
</template>
```

{{opened}} 返回一个 boolean 值。若为 true，则显示当前标签；否则不显示。

#### [append](https://github.com/alibaba/weex/blob/doc/doc/syntax/render-logic.md)

```html
<template>
  <div append="tree/node"></div>
</template>
```

append 属性的可选值为 tree 或 node。不同的值会走不同的渲染过程。

#### [on...](https://github.com/alibaba/weex/blob/doc/doc/syntax/events.md)

```html
<template>
  <div onclick="gotoDetail"></div>
  <div onappear="loadMore"></div>
</template>
```

为当前 weex 标签注册事件处理函数。

## slider

`slider`是一个轮播标签,`indicator`是指示器,`slider-page`则是轮播内容.

```html
<slider></slider>
```

这个标签就是vue的"组件",这些组件怎么写的我们可以不用管(看过官方文档的都应该直到),编译的时候weex会帮我们处理好的.

#### 属性

首先`slider`标签有以下属性(暂时知道这么多):

```html
<slider interval="1000" auto-play="true" append="tree">
</slider>
```

* interval:滚动时间.
* auto-play:是否自动播放.
* [append](https://github.com/alibaba/weex/blob/doc/doc/syntax/render-logic.md):走不同的渲染列表方式,`tree`将会等待所有的列表渲染完成再显示,而`node`则渲染一个就显示一个.

#### indicator

`indicator`是上面那个`slider`内部的标签,需要一起配合使用.

#### 使用示例

html代码:

```html
<template>
  <slider interval="1000" auto-play="true" append="tree">
    <indicator></indicator>
    <image repeat="{{sliders}}" src="{{url}}"></image>
  </slider>
</template>
```

js代码:

```javascript
// 引用weex组件
require('weex-components');
var img0 = '//gw.alicdn.com/tps/i2/TB1DpsmMpXXXXabaXXX20ySQVXX-512-512.png_400x400.jpg';
var img1 = '//gw.alicdn.com/tps/i1/TB1M3sQMpXXXXakXXXXApNeJVXX-360-360.png';

module.exports = {
  data:{
    sliders:[
      {
        url:""
      },
      {
        url:""
      },
      {
        url:""
      }
    ]
  }
}
```

以下的标签我就简单介绍记录，详细的可以clone[weex](https://github.com/alibaba/weex)官方库查看里面的examples文件夹.

## wxc-navpage

顶部栏:

```html
<wxc-navpage data-role="none" background-color="#db3652" title="首页" title-color="white" left-item-title="{{head_left}}" left-item-color="white" right-item-src="http://gtms02.alicdn.com/tps/i2/TB1ED7iMpXXXXXEXXXXWA_BHXXX-48-48.png"></wxc-navpage>
```

## image

图片标签

```html
<image class="" src="http://gtms02.alicdn.com/tps/i2/TB1ED7iMpXXXXXEXXXXWA_BHXXX-48-48.png"></image>
```

##　text

文本标签

```html
<text class="">相当于ｐ标签</text>
```

## wxc-marquee

跑马灯标签

```html
<wxc-marquee count="10" interval="3000" duration="1000" step="40">
  <div class="win-text font-dot" repeat="{{user}}">
    <text class="font-small font-dot">{{name}}</text>
  </div>
</wxc-marquee>
```

## web

```html
<web class="content" id="webview" src='https://m.taobao.com/?spm=0.0.0.0&v=0#index' onpagestart="startload" onpagefinish="finishload" onerror="failload"></web>
```

web还有很多状态的方法,比如上面的`onpagestart`表示页面开始加载执行的方法,`onpagefinish`页面加载完成,`onerror`页面加载出错.

# js模块

导入js模块有三种方式,不过严格来说是使用js模块有三种,第一种很简单,只需要一行代码,比如导入弹出框模块:

```javascript
let modal = require('@weex-module/modal');
```

然后这么使用:

```javascript
modal.toast({
  "message":"我是提示框",
  "duration":2
});
```

第二种,你可以这样直接点:

```javascript
require('@weex-module/modal').toast({
  "message":"我是提示框",
  "duration":2
});
```

官方demo有些就是这样使用,估计是懒得设置变量了吧...但是我们开发还是要好好先赋值到一个变量滴.

第三种方法有点新奇,但是好像已经不支持使用了:

```javascript
this.$call("modal","toast",{"message":"我是提示框","duration":2});
```

个人建议使用第一种方法,毕竟直观方便.

#### modal

这是一个弹出框,它有四个方法:toast,alert,confirm,prompt,每个框都有不同的属性,下面就介绍这些使用方法.

```javascript
let modal = require('@weex-module/modal');

// 提示框
modal.toast({
  "message":"我是提示框",   //提示信息
  "duration":2,  //持续2秒
});

// 警告框
modal.alert({
  "message":"我是警告框",
  'okTitle': "同意",
  'cancelTitle': "拒绝"
},()=>{
  console.log("点击了同意");
});

// 确认框
modal.confirm({
  "message":"我是确认框",
  'okTitle': "同意",
  'cancelTitle': "拒绝"
},(result)=>{
  console.log("点击了:"+result);
  // result 是一个字符串,值为"okTitle"或者"cancelTitle"的值
});

// 输入框
modal.confirm({
  "message":"我是输入框",
  'okTitle': "同意",
  'cancelTitle': "拒绝"
},(res)=>{
  console.log("输入:"+res.data);
});
```

从上面我们可以看出除了`toast`,其它三个都是有回调函数的.

#### stream

这个模块实现网络请求,使用如下:

```javascript
let stream = require('@weex-module/stream');

stream.fetch({
  method:"GET",
  url:"your url",
  type:"json"
},(res)=>{
  console.log(JSON.stringify(res.data));
},(response)=>{
  console.log(response.length);
});
```

详细的可以[点击这里](https://github.com/weexteam/article/issues/53)查看API.

#### dom

包含如下可以更新dom树的dom API,开发者在日常开发中，唯一可在.we文件中使用的是scrollToElement,让页面滚动到那个对应的节点，这个API只能在scroller和list组件中用.

```javascript
let dom = require('@weex-module/dom');

dom.scrollToElement(this.$el('someId'), {offset: 10});
```

更多API信息[点击这里](https://alibaba.github.io/weex/doc/modules/dom.html)

#### animation

weex实现了动画效果,个人感觉很不错.

API:`transition(node, options, callback)`.

node是将要使用动画的元素,options是执行动画的选项,callback是动画执行完成后的的回调函数.

这里就不一一介绍了,感兴趣的可以[点击这里](https://alibaba.github.io/weex/doc/modules/animation.html)查看更多的选项.

```html
<template>
  <div class="ct">
    <div id="test"></div>
  </div>
</template>

<script>
let animation = require('@weex-module/animation');
let testEl = this.$el('test');

animation.transition(testEl, {
  styles: {
    color: '#FF0000',
    transform: 'translate(1, 1)',
    transformOrigin: 'center center'
  },
  duration: 0, //ms
  timingFunction: 'ease',
  delay: 0 //ms
}, function () {
  nativeLog('animation finished.')
})
</script>
```

#### webview

相信接触过native开发的同学都知道这是什么东西,如果你第一次听说,那就把这个当做一个浏览器,只是这个浏览器运行在APP里面.

现在很多APP将需要经常更新的部分或者活动页部分替换成网页,这样可以实现无缝"升级".那么自然的这个`webview`就有控制网页的方法了.比如一般的后退,前进和刷新.

```javascript
let webview = require('@weex-module/webview');
let webElement = this.$el('webview');//这是一个web组件

// 前进
webview.goForward(webElement.ref);
// 返回
webview.goBack(webElement.ref);
// 刷新
webview.refresh(webElement.ref);
```

#### navigator

这是一个页面导航的模块,比如你点击一个商品后需要跳转到那个页面,那么你就需要这个模块来控制了,这个模块有两个方法,第一个是`push`增加页面:

```javascript
let params = {
  'url': 'navigator-demo.js',//跳转到那个页面(已经将.we类型文件打包成了js文件)
  'animated' : 'true',//有过场动画
}
let navigator = require('@weex-module/navigator');
navigator.push(params, function(e) {
  // 跳转完成后
});
```

第二个`pop`回退页面:

```javascript
let params = {
  'animated' : 'true',//有过场动画
}
let navigator = require('@weex-module/navigator');
navigator.pop(params, function(e) {
  // 跳转完成后
});
```

#### storage

这是一个存储模块,官方介绍(大概翻译):

> storage允许您添加、修改或删除存储的数据项。

如果你使用过`vuex`,那么我说这和`vuex`差不多那你肯定明白了这个是如何使用的了.对于不懂的同学,我还是简单的介绍一下:在构建中型的vue应用的时候你有时候需要让各个组件通信,你可以使用`$broadcast`和`$dispatch`传递信息,可是随着项目进展信息越来越多的时候,你会发现自己根本没控制那么多,到最后应用出bug的时候你可能是一脸懵圈的,所以使用vuex很有必要.

说了这么多,storage也是这个作用,但是他使用不像`vuex`官方入门教程需要手动创建和编写那么多getter和actions,而且api更简单(毕竟就这几个).

storage数据是以键/值方式存储的.

```javascript
let storage = require('@weex-module/storage');

storage.setItem('bar', 'bar-value', (e)=>{
  // 回调函数
  // e 是一个对象:{result:"",data:""}
  // 如果存储成功,则 e.result 的值为 'succeed',而 e.data 的值为 'undefined'.
  // 如果你的 key/value 是空字符串,那么 e.data 的值为'invalid_param'
  console.log(e);
});
```

设置值成功后我们可以在其他组件中获取这个值:

```javascript
let storage = require('@weex-module/storage');

storage.getItem('bar', (e)=>{
  // 回调函数
  // e 是一个对象:{result:"",data:""}
  // 如果没有bar,那么e.data为'undefined'
  console.log(e.data);// bar-value
});
```

除了`setItem`和`getItem`,还有`removeItem`,`length`,`getAllKeys`,这里就不详细说了,详细信息[点击这里](https://alibaba.github.io/weex/doc/modules/storage.html).

#### Timer

weex封装了`setTimeout`,`setInterval`.使用方面和js中没有很大的区别,你可以当做普通的js函数使用.官方weex有实现倒计时,不过没有毫秒数.

#### clipboard

这是一个剪贴板,有些应用需要使用到这个获取用户的剪贴板内容.好像也没有什么可以介绍的,看看官方文档就能懂了,[点击这里吧](https://alibaba.github.io/weex/doc/modules/clipboard.html)

## 事件输出

1. 点击`wxc-tabbar`底部导航栏.

```javascript
this.$on("tabBar.onClick",(e)=>{ 
  let detail = e.detail;
});
// e = {"timestamp":1473759682450,"detail":{"index":1},"type":"tabBar.onClick"}
```


## 其它资料

本教程参考了众多的资料,其中大部分是来源于官方的`examples`文件夹,所以对于以上有疑问的地方请以官方的为准,本人只是在使用的过程中得出的一些结论和经验,并不代表符合大多数人的使用.

有疑问都可以查看`examples`,请善用`examples`.

**本文最后更新于2016-09-18**

* [DOM操作](https://github.com/alibaba/weex/blob/doc/doc/modules/dom.md)
* [ID](https://github.com/alibaba/weex/blob/doc/doc/syntax/id.md)
* [weex文档列表](http://weex.help/topic/57792770eb60516a48db5485)
* [weex英文文档](https://alibaba.github.io/weex/doc/)